conclusion of chapter 7 : Constants and Fields 

difference between Readonly fields and constant fields ??

1- constants are always considered to be static fields 
2- defining constants make creation of meta data 
3- when code refer to constant value compiler lookup the symbol in the metadata of the assembly that define contant , he take value and embedded it to the il code 
4- constants does not have a versioning story .
5- you can define constant in dll and use it in your application , 
   your app will still working even if you delete lib itself as value stored in metadata
6- Because fields are stored in dynamic memory, their value can be obtained at run time only. Fields also solve the versioning problem that exists with constants. In addition, afield can be of any data type, so you don’t have to restrict yourself to your compiler’s  built-in primitive types (as you do for constants) .
7- readonly fields can be set only one time within constructor which is calld only one time once object crteated 
8- you can simply change the value of readonly fields with reflection 