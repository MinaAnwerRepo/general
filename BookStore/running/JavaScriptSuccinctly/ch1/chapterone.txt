//------------------------JavaScript objects------------------------------------------------------

=>  Creating Object using  : 

In JavaScript, objects are king: Almost everything is an object or acts like an object. Understand
objects and you will understand JavaScript. So let's examine the creation of objects in
JavaScript.

=> simplest way to Create Object 

--> var cody = new Object();

 we called this object as an Object() object
 
=> object that Created from Object() function is not different from Object() function 

=> JavaScript bakes the String() and Object() constructor functions into the language itself to
make the creation of a String() object and Object() object trivial. But you, as a coder of the
JavaScript language, can also create equally powerful constructor functions. In the following
sample, I demonstrate this by defining a non-native custom Person() constructor function so
that I can create people from it.

=> 
 not like c# , The primitive values null, undefined, "string", 10, true, and
false are not objects

The null and undefined values are such trivial values that they do not require a constructor
function, nor the use of the new operator to establish them as a JavaScript value. To use null
or undefined, all you do is use them as if they were an operator. The remaining primitive
values—string, number, and Boolean—while technically returned from a constructor function,
are not objects.

=>  Primitive values are equal by value 
    console.log(d1=d2);
    console.log(d1==d2);
    console.log(d1===d2);
   
=>  The string, number, and Boolean primitive values act like
    objects when used like objects

=>  A new variable that points to an existing complex object does not copy the object. This is why
	complex objects are sometimes called reference objects. A complex object can have as many
	references as you want, and they will always refer to the same object, even as the object being
	referenced changes.

    this means that all objects are reference type .
    you can  Create object and reference it with as many as you wan references 

=> 
   
   













