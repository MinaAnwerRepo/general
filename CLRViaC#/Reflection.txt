chapter 23 : Assembly Loading and Reflection

important notes : 

=> Reflection is slow. When using reflection, the names of types and their members are not
known at compile time; you discover them at run time by using a string name to identify each
type and member. This means that reflection is constantly performing string searches as the
types in the System.Reflection namespace scan through an assembly’s metadata. Often,
the string searches are case-insensitive comparisons, which can slow this down even more.

=> How to discover Types in an assembly :

1- using  GetType static function 
     The System.Type type offers several overloaded versions of the static GetType method. All
     versions of this method take a String. The string must specify the full name of the type (including its namespace). 
	 Note that the primitive type names supported by the compiler (such as C#’s int, string, bool, and so on) 
	 aren’t allowed because these names mean nothing to the CLR .
2-   using  typeof operator 



=> Constructing an Instance of a Type :

very important way to initialize new instant of object using Reflection 

1- using System.Activator’s CreateInstance methods : 

            System.DateTime x= DateTime.Now ; 
            Type t = x.GetType();
            object obj = System.Activator.CreateInstance(t);
            DateTime y = (System.DateTime)obj;
     note :  it always uses default parameterless constructor to intialize the new instant of object 
	         string as an example have no parameterless constructor to use 
2-  System.Activator’s CreateInstanceFrom methods :
3-  System.AppDomain’s methods 
4-  System.Reflection.ConstructorInfo’s

note : 
      you know that all functions that takes type name and class name and Create new instance of this class 
	  by default it calls parameterless constructor ...this is a problem with any value type as it have no parameterless 
	  constructor ..
	  solution is to use any overloads that takes 
    






























